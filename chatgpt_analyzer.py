import openai

from config import OPENAI_API_KEY, OPENAI_MODEL

# Configure OpenAI client
openai.api_key = OPENAI_API_KEY



DEFAULT_PROMPT = """
–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî —à–≤–∏–¥–∫–æ –π —Ç–æ—á–Ω–æ –æ—Ü—ñ–Ω–∏—Ç–∏ –Ω–æ–≤–∏–Ω–Ω–∏–π –∞–±–æ —Å–æ—Ü—ñ–∞–ª—å–Ω–∏–π –ø–æ—Å—Ç.

üîß –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:
1. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π **—Ç—ñ–ª—å–∫–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é**.
2. –§–æ—Ä–º–∞—Ç –º–∞—î –±—É—Ç–∏ **–∫–æ—Ä–æ—Ç–∫–∏–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π, –∑—Ä—É—á–Ω–∏–π –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –Ω–∞ –º–æ–±—ñ–ª—å–Ω–æ–º—É –≤ Telegram**.
3. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∑—ñ, —â–æ–± —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ –±–ª–æ–∫–∏.
4. –Ø–∫—â–æ —î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ –∑–≥–∞–¥–∫–∞ –ø—Ä–æ –¥–∂–µ—Ä–µ–ª–æ ‚Äî **–æ—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–π** –π–æ–≥–æ (–æ—Ñ—ñ—Ü—ñ–π–Ω–µ / —Ñ–µ–π–∫–æ–≤–µ / –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ / –∂–æ–≤—Ç–∞ –ø—Ä–µ—Å–∞ / –µ–∫—Å–ø–µ—Ä—Ç / –±–ª–æ–≥ —Ç–æ—â–æ).
5. –Ø–∫—â–æ –¥–∂–µ—Ä–µ–ª–æ ‚Äî —Ä–µ–ø–æ—Å—Ç, —Å–ø—Ä–æ–±—É–π –≤–∏–∑–Ω–∞—á–∏—Ç–∏ **–æ—Ä–∏–≥—ñ–Ω–∞–ª**.
6. –ó–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —Ü–µ –º–µ–º, –∂–∞—Ä—Ç –∞–±–æ –µ–º–æ—Ü—ñ–π–Ω–∏–π –≤–∫–∏–¥.
7. –û—Å–æ–±–ª–∏–≤–æ –∑–≤–µ—Ä—Ç–∞–π —É–≤–∞–≥—É –Ω–∞ —Ç–µ–º–∏ –≤—ñ–π–Ω–∏ —Ç–∞ –ø–∞–Ω—ñ–∫–∏.

üì• –ê–Ω–∞–ª—ñ–∑—É–π –Ω–∞—Å—Ç—É–ø–Ω–∏–π –ø–æ—Å—Ç:
<POST>: {post_text} </POST>
<CHANNEL>: {channel_name} </CHANNEL>

üì§ –§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:

üì∞ **–°—É—Ç—å:** [–æ–¥–Ω–µ –∫–æ—Ä–æ—Ç–∫–µ —Ä–µ—á–µ–Ω–Ω—è –∑ —Ä–µ–∑—é–º–µ]

üìä **–û—Ü—ñ–Ω–∫–∞ (0‚Äì100%):**
‚Ä¢ –ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∞: XX% ‚Äì [1 —Ä–µ—á–µ–Ω–Ω—è]
‚Ä¢ –ë—Ä–µ—Ö–Ω—è: XX% ‚Äì [1 —Ä–µ—á–µ–Ω–Ω—è]
‚Ä¢ –ï–º–æ—Ü—ñ–π–Ω–∞ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ—è: XX% ‚Äì [1 —Ä–µ—á–µ–Ω–Ω—è]
‚Ä¢ –¢–æ–∫—Å–∏—á–Ω—ñ—Å—Ç—å: XX% ‚Äì [1 —Ä–µ—á–µ–Ω–Ω—è]
‚Ä¢ –í–æ—î–Ω–Ω–∞ –ø–∞–Ω—ñ–∫–∞: XX% ‚Äì [1 —Ä–µ—á–µ–Ω–Ω—è]
‚Ä¢ –®—ñ—Ç–ø–æ—Å—Ç–∏–Ω–≥/—Ç—Ä–æ–ª—ñ–Ω–≥: XX% ‚Äì [1 —Ä–µ—á–µ–Ω–Ω—è]

üîç **–î–∂–µ—Ä–µ–ª–æ:** [–Ω–∞–∑–≤–∞ –¥–∂–µ—Ä–µ–ª–∞ –∞–±–æ –∫–∞–Ω–∞–ª—É] ‚Äî [—Ç–∏–ø: –æ—Ñ—ñ—Ü—ñ–π–Ω–µ / –∂–æ–≤—Ç–∞ –ø—Ä–µ—Å–∞ / –ø–ª—ñ—Ç–∫–∏ / –±–æ—Ç / –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ / —Ä–æ—Å—ñ–π—Å—å–∫–µ / –∞–Ω–æ–Ω—ñ–º–Ω–µ / —Ç–æ—â–æ]

üìë **–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–∫—Ç—ñ–≤:**  
‚Ä¢ [—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è 1]: –ø—Ä–∞–≤–¥–∞ / –±—Ä–µ—Ö–Ω—è / –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ  
‚Ä¢ [—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è 2]: ...

‚úÖ **–í–∏—Å–Ω–æ–≤–æ–∫:** [1‚Äì2 —Ä–µ—á–µ–Ω–Ω—è –∑ –∑–∞–≥–∞–ª—å–Ω–æ—é –æ—Ü—ñ–Ω–∫–æ—é —ñ –ø–æ—Ä–∞–¥–æ—é —á–∏—Ç–∞—á—É]

üìé –Ø–∫—â–æ –¥–æ—Ä–µ—á–Ω–æ ‚Äî –¥–æ–¥–∞–π –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è, –Ω–∞–ø—Ä.:
‚ö†Ô∏è *–¶–µ–π –∫–∞–Ω–∞–ª —á–∞—Å—Ç–æ –ø–æ—à–∏—Ä—é—î –ø–∞–Ω—ñ–∫—É, –≤–∫–∏–¥–∏ –∞–±–æ –Ω–µ–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.*
"""


class ChatGPTAnalyzer:
    def __init__(self):
        self.client = openai.OpenAI(api_key=OPENAI_API_KEY)

    async def analyze_post(self, post_text: str, channel_name: str = "Unknown", custom_prompt: str = "") -> str:
        """
        Analyze a post using ChatGPT API
        
        Args:
            post_text (str): The text content of the post to analyze
            channel_name (str): Name of the channel where the post was shared
            custom_prompt (str): Custom prompt to use for analysis (optional)
            
        Returns:
            str: Analysis result from ChatGPT
        """
        try:
            messages = []
            # Create a prompt for analysis
            if custom_prompt:
                # Use custom prompt if provided
                prompt = f"""

                Channel: {channel_name}
                Message: {post_text}
                """
                messages.append({"role": "system", "content": custom_prompt})
            else:
                # Use default prompt
                prompt = DEFAULT_PROMPT
                messages.append({"role": "system", "content": 'You are a master of information warfare, an expert in detecting propaganda, manipulation, and fake news.'})
            
            messages.append({"role": "user", "content": prompt})

            # Call ChatGPT API
            response = self.client.chat.completions.create(
                model=OPENAI_MODEL,
                messages=messages,
                max_tokens=500,
                temperature=0.7
            )

            return response.choices[0].message.content.strip()

        except Exception as e:
            return f"Error analyzing post: {str(e)}"

    async def analyze_image_post(self, image_urls: list, caption: str, channel_name: str = "Unknown", custom_prompt: str = "") -> str:
        """
        Analyze an image post using ChatGPT Vision API (supports multiple images)
        
        Args:
            image_urls (list): List of image URLs to analyze
            caption (str): The caption or description of the images
            channel_name (str): Name of the channel where the post was shared
            custom_prompt (str): Custom prompt to use for analysis (optional)
            
        Returns:
            str: Analysis result from ChatGPT
        """
        try:
            messages = []
            # Create a prompt for image analysis
            if custom_prompt:
                prompt = f"""
                Channel: {channel_name}
                Caption: {caption or "No text provided"}
                """
                messages.append({"role": "system", "content": custom_prompt})
            else:
                # Use default prompt
                prompt = DEFAULT_PROMPT + f"""
                Caption: {caption or "No text provided"}
                """
                messages.append({"role": "system", "content": 'You are a master of information warfare, an expert in detecting propaganda, manipulation, and fake news.'})

            message_content = [{"type": "text", "text": prompt}]
            for url in image_urls:
                message_content.append({"type": "image_url", "image_url": {"url": url}})
            
            messages.append({"role": "user", "content": message_content})

            # Call ChatGPT Vision API
            response = self.client.chat.completions.create(
                model=OPENAI_MODEL,
                messages=messages,
                max_tokens=500,
                temperature=0.7
            )

            return response.choices[0].message.content.strip()

        except Exception as e:
            return f"Error analyzing image post: {str(e)}"
